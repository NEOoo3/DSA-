#include <iostream>
#include <vector>
#include <limits>

using namespace std;

char COMPUTERMOVE = 'X';
char HUMANMOVE = 'O';

void showBoard(vector<vector<char>> board) {
cout << "\t\t\t " << board[0][0] << " | " << board[0][1] << " | " << board[0][2] << " \n";
cout << "\t\t\t-----------\n";
cout << "\t\t\t " << board[1][0] << " | " << board[1][1] << " | " << board[1][2] << " \n";
cout << "\t\t\t-----------\n";
cout << "\t\t\t " << board[2][0] << " | " << board[2][1] << " | " << board[2][2] << " \n\n";
}   

void showInstructions() {
cout << "\nChoose a cell numbered from 1 to 9 as below and play\n\n";
cout << "\t\t\t 1 | 2 | 3 \n";
cout << "\t\t\t-----------\n";
cout << "\t\t\t 4 | 5 | 6 \n";
cout << "\t\t\t-----------\n";
cout << "\t\t\t 7 | 8 | 9 \n\n";
}   

void initialise(vector<vector<char>>& board) {
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
board[i][j] = '*';
}
}
}   

bool isGameOver(vector<vector<char>> board) {
return (rowCrossed(board) || columnCrossed(board) || diagonalCrossed(board));
}

bool rowCrossed(vector<vector<char>> board) {
for (int i = 0; i < 3; i++) {
if (board[i][0] == board[i][1] && board[i][1] == board[i][2] && board[i][0] != '*')
return true;
}
return false;
}

bool columnCrossed(vector<vector<char>> board) {
for (int i = 0; i < 3; i++) {
if (board[0][i] == board[1][i] && board[1][i] == board[2][i] && board[0][i] != '*')
return true;
}
return false;
}   

bool diagonalCrossed(vector<vector<char>> board) {
if (board[0][0] == board[1][1] && board[1][1] == board[2][2] && board[0][0] != '')
return true;
if (board[0][2] == board[1][1] && board[1][1] == board[2][0] && board[0][2] != '')
return true;
return false;
}   

// Minimax Implementation
int minimax(vector<vector<char>> board, int depth, bool isAI) {
int score = 0;
int bestScore = 0;
if (isGameOver(board)) {
if (isAI == true)
return -10;
if (isAI == false)
return +10;
} else {
if (depth < 9) {
if (isAI == true) {
bestScore = numeric_limits<int>::min();
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == '') {
board[i][j] = COMPUTERMOVE;
score = minimax(board, depth + 1, false);
board[i][j] = '';
if (score > bestScore) {
bestScore = score;
}
}
}
}
return bestScore;
} else {
bestScore = numeric_limits<int>::max();
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == '') {
board[i][j] = HUMANMOVE;
score = minimax(board, depth + 1, true);
board[i][j] = '';
if (score < bestScore) {
bestScore = score;
}
}
}
}
return bestScore;
}
} else {
return 0;
}
}
}   

int bestMove(vector<vector<char>> board, int moveIndex) {
int x = -1, y = -1;
int score = 0, bestScore = -999;
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == '') {
board[i][j] = COMPUTERMOVE;
score = minimax(board, moveIndex + 1, false);
board[i][j] = '';
if (score > bestScore) {
bestScore = score;
x = i;
y = j;
}
}
}
}
return x * 3 + y;
}   

// A function to play Tic-Tac-Toe
void playTicTacToe(int whoseTurn) {
vector<vector<char>> board(3, vector<char>(3));
int moveIndex = 0, x = 0, y = 0;
initialise(board);
showInstructions();   

while (!isGameOver(board) && moveIndex != 9) {
int n;
if (whoseTurn == 1) {
n = bestMove(board, moveIndex);
x = n / 3;
y = n % 3;
board[x][y] = COMPUTERMOVE;
cout << "COMPUTER has put a " << COMPUTERMOVE << " in cell " << n + 1 << "\n\n";
showBoard(board);
moveIndex++;
whoseTurn = 0;
} else if (whoseTurn == 0) {
cout << "You can insert in the following positions: ";
for (int i = 0; i < 3; i++) {
for (int j = 0; j < 3; j++) {
if (board[i][j] == '') {
cout << (i * 3 + j) + 1 << " ";
}
}
}
cout << "\n\nEnter the position = ";
cin >> n;
n--;
x = n / 3;
y = n % 3;
if (board[x][y] == '' && n < 9 && n >= 0) {
board[x][y] = HUMANMOVE;
cout << "\nHUMAN has put a " << HUMANMOVE << " in cell " << n + 1 << "\n\n";
showBoard(board);
moveIndex++;
whoseTurn = 1;
} else if (board[x][y] != '*' && n < 9 && n >= 0) {
cout << "\nPosition is occupied, select any one place from the available places\n\n";
} else if (n < 0 || n > 8) {
cout << "Invalid position\n";
}
}
}   

if (!isGameOver(board) && moveIndex == 9) {
cout << "It's a draw\n";
} else {
if (whoseTurn == 1) {
whoseTurn = 0;
} else if (whoseTurn == 0) {
whoseTurn = 1;
}
if (whoseTurn == 1) {
cout << "COMPUTER has won\n";
} else {
cout << "HUMAN has won\n";
}
}
}   

int main() {
cout << "\n---------------------------------------------------------------------\n\n";
cout << "Tic-Tac-Toe";
cout << "\n---------------------------------------------------------------------\n\n";
char count = 'Y';
do {
char choice;
cout << "Do you want to start
